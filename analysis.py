import matplotlib.pyplot as plt
import random
import numpy as np

from model import objective_1, constraints_1

# this code was used to create the various graphs in the report

s_default = [0, 0.1, 0.1, 0.1, 0, 0.05, 0.1, 0.1, 0.05, 0, 0, 0, 0, 0.5, 0, 0.1, 0, 0, 0, 0, 0.3, 0, 0.05, 0.25, 0, -0.25, 0.1, 0.2, 0 ]
g_default = [1, 1,   1,   1,   1, 1,    1,   1,   1,    1, 1, 1, 1, 0  , 1, 1,   1, 1, 1, 1, 1,   1, 1, 1, 1,     1,  1,   1,   1,   1  ]


def single_plot(x, r=False, show=True, style="v", gas=False, newfig=True, accuracy=1):
    if newfig:
        plt.figure(figsize=(6.5, 5))
    plt.plot([0], [0], c="k")  # used for legend only
    plt.plot([0], [0], c="b")
    plt.plot([0], [0], c="r")

    # generate random vector for testing purposes
    if r:
        x1 = []  # x1 is a random trajectory
        for i in range(len(x)):
            x1.append(random.randint(-50, 50)/100)
        print(x1)

    x1 = s_default[:15] + g_default[:15]
    objective_1(x, [[], [], accuracy, 16, gas, False], plot=True, style=style)

    #plt.legend(["Track border", "Trajectory inside", "Trajectory outside"])
    plt.legend(["Track border"])
    if show:
        plt.show()

# function for analyzing monotonicity and convexity
def response():
    N = 15
    n_pts = 100

    constraints = True
    a_max = 16
    accuracy = 1

    plt_gas = False  # True to plot gas instead of steering

    points = [0, 6, 13]
    colors = {points[0]: "r", points[1]: "g", points[2]: "b"}

    fig, axs = plt.subplots(2, 2, figsize=(10, 7.5))

    axs[0, 1].plot(0, 0, c="k", linestyle=":")
    axs[0, 1].plot(0, 0, c="k", linestyle="--")
    axs[0, 1].legend([r"$g_1$", r"$g_2$"])


    for k in range(2):
        if k == 1:
            plt_gas = True
        for j in points:
            color = colors[j]
            if plt_gas:
                j += N
            x, f, c1, c2 = [], [], [], []
            for i in range(-n_pts, n_pts):
                x_vec = s_default[:N] + g_default[:N]

                s = i/200
                if plt_gas:
                    s += 0.5
                x_vec[j] = s

                out = constraints_1(x_vec, [[], [], 1 / accuracy, a_max, True, constraints], plot=False)
                c1.append(out[0]*-1)
                c2.append(-out[1])

                out = objective_1(x_vec, [[], [], 1/accuracy, a_max, True, constraints], plot=False)
                f.append(out)
                x.append(s)

            axs[k, 0].plot(x, f, c=color)

            axs[k, 1].plot(x, c1, linestyle=":", c=color)
            axs[k, 1].plot(x, c2, linestyle="--", c=color)

    legend_s, legend_p = [], []
    for i in points:
        legend_s.append(r"$x_{"+str(i+1)+"}$")
        legend_p.append(r"$p_{" + str(i + 1) + "}$")

    axs[0, 0].set(ylabel=r"$f(x)$", xlabel="s", title="Objective")
    axs[0, 1].set(ylabel=r"$g(x)$", xlabel="s", title="Constraints")
    axs[0, 0].legend(legend_s)

    axs[1, 0].set(ylabel=r"$f(x)$", xlabel="p")
    axs[1, 1].set(ylabel=r"$g(x)$", xlabel="p")
    #axs[1, 0].legend(legend_p)
    plt.show()


# derivatives as function of finite difference step size
# copy of previous function adjusted for derivatives
def derivatives():
    N = 15
    step_size = np.logspace(-15, 0, 100)
    offset = 0.2

    constraints = True
    a_max = 16
    accuracy = 1

    plt_gas = False  # True to plot gas instead of steering

    points = [0, 6, 13]
    colors = {points[0]: "r", points[1]: "g", points[2]: "b"}


    fig, axs = plt.subplots(2, 2, figsize=(10, 7.5))

    # only used for displaying legend
    axs[0, 1].plot(0, 0, c="k", linestyle=":")
    axs[0, 1].plot(0, 0, c="k", linestyle="--")
    #axs[0, 1].legend([r"$g_1$", r"$g_2$"])

    for k in range(2):
        if k == 1:
            plt_gas = True
        for j in points:
            color = colors[j]
            if plt_gas:
                j += N
            x, f, c1, c2 = [], [], [], []

            # get constraint and objective values at x0
            x_vec = s_default[:N] + g_default[:N]
            x_vec[j] = offset
            c_0 = constraints_1(x_vec, [[], [], 1 / accuracy, a_max, True, constraints], plot=False)
            o_0 = objective_1(x_vec, [[], [], 1 / accuracy, a_max, True, constraints], plot=False)

            for step in step_size:

                # get constraint and objective values at x0 + step
                x_vec = s_default[:N] + g_default[:N]
                x_vec[j] = step + offset

                c_1 = constraints_1(x_vec, [[], [], 1 / accuracy, a_max, True, constraints], plot=False)
                o_1 = objective_1(x_vec, [[], [], 1 / accuracy, a_max, True, constraints], plot=False)

                # finite differences of constraints and objective
                c1.append(- (c_1[0] - c_0[0])/step)
                c2.append(- (c_1[1] - c_0[1])/step)
                f.append((o_1 - o_0)/step)
                x.append(step)

            axs[k, 0].plot(x, f, c=color)

            axs[k, 1].plot(x, c1, linestyle=":", c=color)
            axs[k, 1].plot(x, c2, linestyle="--", c=color)

    legend_s, legend_p = [], []
    for i in points:
        legend_s.append(r"$x_{" + str(i + 1) + "}$")
        legend_p.append(r"$p_{" + str(i + 1) + "}$")

    axs[0, 0].set(ylabel=r"$\partial f(x)/ \partial s$", xlabel=r"$\Delta s$", title="Objective")
    axs[0, 1].set(ylabel=r"$\partial g(x)/ \partial s$", xlabel=r"$\Delta s$", title="Constraints")
    #axs[0, 0].legend(legend_s)

    axs[1, 0].set(ylabel=r"$\partial f(x)/ \partial p$", xlabel=r"$\Delta p$")
    axs[1, 1].set(ylabel=r"$\partial g(x)/ \partial p$", xlabel=r"$\Delta p$")
    # axs[1, 0].legend(legend_p)

    axs[0, 0].set_xscale("log")
    axs[1, 0].set_xscale("log")
    axs[0, 1].set_xscale("log")
    axs[1, 1].set_xscale("log")

    plt.show()

# plot multiple trajectories
def multi_plot():
    plt.plot(0, 0, c="b")
    plt.plot(0, 0, c="r")
    plt.plot(0, 0, c="g")
    single_plot(s_default[0:10], style="b", show=False, newfig=False)
    x = [-0.0011149702103332155, 0.35042759136210744, 0.11189425079515802, -0.010740747799831989, -0.0019715290717487975, 0.03271354130724621, 0.07211043116620298, 0.15319058885544773, -0.046445873405480426, 0.019118829254688954]
    single_plot(x, style="r", show=False, newfig=False)
    x = [0.03253258654371415, 0.13797755868070385, 0.13311230006894928, 0.12763270680915775, 0.002032268741484761, 0.031889626151414184, 0.0706897311921827, 0.07774300556481292, 0.030594028716627003, -0.009930109566943892]
    single_plot(x, style="g", show=False, newfig=False)
    plt.legend(["Initial guess", "Nelder-Mead", "COBYLA"])
    plt.show()

def multi_plot2():
    plt.plot(0, 0, c="b")
    plt.plot(0, 0, c="r")
    plt.plot(0, 0, c="g")
    x = [0.8064919538222635, -0.07991501225165062, -0.1247298482373966, 0.2026660074348861, 0.012590331047876942, -0.05504473816475808, 0.12323935205753789, 0.15261411885895013, -0.04648345514773685, -0.0008881471134085681]
    single_plot(x, style="b", show=False, newfig=False)
    x = [0.683140596162424, -0.06683834575307313, -0.0005222977363821795, 0.08558182718605747, 0.034660660950598325, 0.015437367524194655, 0.06734602437285488, 0.09848355513015493, 0.054640704927691325, 0.003030497079708429]
    single_plot(x, style="r", show=False, newfig=False)
    x = [0.6398174793151161, -0.05001186789112241, 0.03330932690575478, 0.03410641091860253, 0.025369885324094968, 0.05208565559940153, 0.09338306552249018, 0.09318264242771399, 0.04720633094106638, -0.18403626803518428]
    single_plot(x, style="g", show=False, newfig=False)
    plt.legend(["Nelder-Mead", "COBYLA", "Steepest gradient descent"])
    plt.show()

#multi_plot2()
single_plot(s_default+g_default, gas=True, accuracy=1)
#response()
#derivatives()



### final solutions

# NM a13 [0.4431411572429281, 0.009527722631915909, 0.08246870790538369, 0.05943737205000489, 0.03933278526307804, -0.03105299514902545, 0.09967151983764791, 0.06630258623767876, 0.1166315617195896, -1.1209886795997367e-05, 0.0004605698070448295, 0.00021158056943407826, 0.00015518402690564448, 0.47607263008580547, 0.000979045924120467, 0.19792891684437833, 3.9236549013288365e-05, 8.20510094731201e-05, -0.0012202548031722184, -6.910969461228293e-06, 0.2628378092125243, -0.00546909529067389, 0.077619255952735, 0.19626097075146048, 0.0001127088930420796, -0.1950636112099765, 0.2381919317739407, 0.05173673898215547, 8.618833246210114e-05, 0.9998567936566298, 0.9997186120767727, 0.9999429764070946, 0.9999949503615406, 0.9999049006075933, 0.9871135773173492, 0.9994037014441051, 0.999979536195424, 0.980700849736641, 0.9292334487730303, 0.8293798811210125, 0.9872662111509227, 0.985366734681089, 0.000505389551700169, 0.9999986129485277, 0.9530787721748213, 0.953764547306246, 0.9577748521310132, 0.8941017534024812, 0.9746042151317973, 0.9553584961998645, 0.9989340869787275, 0.9999013200312437, 0.9995400148324229, 0.9988493206742108, 0.9999996107560241, 0.9991521280674913, 0.9889932972824322, 0.9901682604785047]
# 345 s 1.0232290598535987 Penalty time: 0.01574624126276296 Penalty acceleration 0.017130375794495167

# NM a13 acu2 [0.4998809852968157, 0.4999992327013357, 0.4277807138776789, 0.005632061970852687, -0.07499396661945948, 0.002225756275296711, 0.08825132155058381, 0.0027553868209666045, 0.13146029269572373, 0.0009294968609588911, -0.011482416208418764, 0.010130516996437832, 0.07341707085831825, 0.07613556483875, 0.06711222488817986, 0.13049973501987222, 0.04678953740016055, 0.05727704178234336, 0.00025288571198036947, -0.00039175186681211793, -0.0832670329983848, 0.08066846058167448, 0.18037575735433145, 0.010019047452886455, -0.03337720518577176, 0.27059966546375636, 0.25859768988699805, 0.2358275705897414, 0.1111798421704697, -0.002240374245171858, 0.020364225257053663, 0.020969968394152053, -0.006000929830180604, -0.008094148070409245, 0.007438613455623936, -0.005432329561495976, -0.0012282909544637148, 0.24927724871368084, 0.0026304181313400237, 0.24073723448644502, 0.2041559408867113, 0.1425193505320376, 0.030500303810796787, 0.026428022888205154, 0.2315127060099073, -0.23642166742206105, 0.04900749207207348, -0.0019710442365105415, -0.0006831176452172537, -0.005965371644297627, 0.21421398103193193, 0.05424137066962345, 0.1265494466487248, 0.1603268896602587, 0.14530903930627262, 0.1360737447254996, -0.0010487740016347994, 0.0003390467315281441, 0.9999898930297156, 0.9979190521769066, 0.9999999422314629, 0.9999525327879399, 0.9999996128039766, 0.9999354553528708, 0.9998656162769894, 0.9999969496192616, 0.9999825396592676, 0.9999468612408702, 0.9996981330869281, 0.9999839593429427, 0.9998031686881002, 0.9999910820416147, 0.999934835176262, 0.9999931441641619, 0.999896614353152, 0.9999817709199355, 0.9999637179826015, 0.9998381964630199, 0.9945033830326677, 0.9999996859055851, 0.906907524303126, 0.7654479155170166, 0.9933364166318197, 0.9999967155948161, 0.9999829242896991, 0.9999816183279859, 0.9999873038422067, 0.9999794750954849, 0.9967036473688977, 0.9480182382452229, 0.9284849190586073, 0.9997876818471363, 0.9999084743287974, 0.9362924016496039, 0.9998847315222383, 0.9999848050988733, 0.9999987783978248, 0.9999397075149388, 0.9881718691697099, 0.9697578806777907, 0.999908678085962, 0.9796494536535383, 0.9999867640196247, 0.9984123721758962, 0.9999722895548757, 0.9999822042769106, 0.9950680022132823, 0.9995396206019249, 0.9985778834528165, 0.9999719388645156, 0.9996705534266173, 0.9991710822639444, 0.9999373642095271, 0.990388004356793, 0.9998669990966389, 0.9999930799714996]
#Number of laps: 1.094160680756615 Penalty time: 0.05307109546661831 Penalty acceleraton 0.025863506678654336
#1819 s

#RDG a13 [0.4972988080015124, 0.06894482875487216, 0.007685833529541652, 0.07374362132178403, 0.057114128585656204, -0.04553200154703109, 0.05244892987610723, 0.15450800887104568, 0.02586544320020024, 0.012971225910383053, 0.013753767591702524, 0.04936559570255495, 0.22756018570098172, 0.22282946166809786, 0.02617098713795055, -0.06110451525835831, -0.033317082966327315, 0.06009226022973914, 0.25574105539221126, 0.01562830771895713, 0.10201032035260274, 0.13975737241907074, 0.07060946058387733, -0.020706585669196677, -0.11768044716557254, 0.19990753930084096, 0.08439600478341962, 0.2015328936176745, -0.026850673962238725, 0.9886811280329203, 0.9999999999999785, 0.9999999999997734, 1.0000000000000244, 0.9998092796434456, 0.9999480194404236, 0.9999087366924644, 0.9997394599257636, 0.9999999999998778, 0.9999999999998803, 1.0000000000000093, 0.9909493602715341, 0.9948838747088015, 0.9999999999996161, 0.9301890239564492, 0.9853524771814723, 0.9999999999304967, 0.8983381932427623, 0.7731925178275911, 0.10396377251977679, 0.999995122334138, 0.9882838675568045, 0.9999993300536871, 0.9999104480009564, 1.0000000350821199, 0.9999999999999475, 0.9999999999999983, 0.9982401703812991, 0.9999999997653928]
#Number of laps: 1.0746174154291295 Penalty time: 0.017263117996190652 Penalty acceleraton 0 Penalty gas: 3.508215362657552e-08

# RGD a13 acu2 [0.49999999999326333, 0.4999999999998062, 0.38265816846268813, -0.03785892851549563, 0.14995873367854742, 0.0698224357908105, -0.1293393591280479, -0.22819379516699562, 0.32481974300993044, -0.010383532212582567, 0.012186095662212798, 0.23929004177064148, -0.15809037938258333, 0.09377860345834572, 0.09302104977490878, 0.20356710087529353, -0.09464718375367949, 0.14395330761485986, 0.010358837093627785, -0.0471241695377908, 0.011982933337670617, 0.025123172464255675, 0.05338885906997608, -0.00687345451786001, 0.1468951998026969, 0.2545846234327307, 0.24428903854493778, 0.24280626341505948, 0.06732706307062032, 0.01642326187696963, -0.028746836437325143, -0.0010385100582121262, 0.01423128922860368, -0.07256168720767439, -0.034722898736066814, 0.1593309095836759, 0.06886987422630515, 0.2412431686216732, 0.16123851467548347, 0.12192241767797807, -0.07667914079961671, 0.21247757884231072, 0.2368280162273485, -0.062405987500252884, 0.022937262250949827, -0.11619480235340353, 0.008592228879885788, 0.11517053671137623, -0.0017306585734494975, 0.19182658759384696, 0.03181659125895146, 0.016129241888552293, 0.08203077714280399, 0.23251066875627016, 0.20949216891434416, 0.10482072051251035, -1.7816148425604927e-10, 6.816987021377948e-11, 0.9999999999999964, 0.9999999999995954, 0.9999999999999745, 0.9999999906051266, 1.0000000000000078, 0.9999999999998671, 0.9999999999999997, 0.999999999999976, 0.9999999999999986, 0.9999999999999305, 0.9912528909416298, 0.9997693707916708, 0.9999999998654009, 0.9999996174092795, 0.9999999996528866, 0.9999999999997808, 0.9999211835623475, 0.9999999999997542, 0.9999999999996643, 0.9999999999999755, 0.9997410674222635, 0.999999999999916, 0.9999999999999988, 0.9999999999999496, 0.9999999999991839, 0.9999999999993302, 0.9999999999999906, 0.9999999999996572, 0.9999997443473864, 0.9999999999996624, 0.9999999999996689, 0.9999999997399422, 0.9999999999891581, 0.9999999999999688, 0.999999999774116, 0.999999882016614, 0.999995629199247, 0.9163407838459949, 0.9999999999997761, 0.9999999999404715, 0.9999999999999858, 0.9890488792994394, 0.9810240226182989, 0.9999999999999916, 1.0000175568040441, 0.9999990161030374, 0.9999999999106016, 0.9998612137525832, 0.9967583409623743, 0.9999997894858002, 0.9999999999998104, 0.9999999864649851, 1.000000000352141, 0.9999999727083579, 0.9999999883401771, 0.999999505269807, 0.9999999995341116, 1.0]
#Number of laps: 1.1101974072843295 Penalty time: 0.013129754626137247 Penalty acceleraton 0.02199938591377737








